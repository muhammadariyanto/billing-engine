// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customerModel "github.com/muhammadariyanto/billing-engine/internal/model/customer"
	mock "github.com/stretchr/testify/mock"
)

// ICustomerRepository is an autogenerated mock type for the ICustomerRepository type
type ICustomerRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, customerID
func (_m *ICustomerRepository) FindByID(ctx context.Context, customerID string) (*customerModel.Customer, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *customerModel.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*customerModel.Customer, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *customerModel.Customer); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerModel.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, customer
func (_m *ICustomerRepository) Insert(ctx context.Context, customer *customerModel.Customer) error {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerModel.Customer) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICustomerRepository creates a new instance of ICustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICustomerRepository {
	mock := &ICustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
