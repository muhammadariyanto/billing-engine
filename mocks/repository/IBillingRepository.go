// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	billingModel "github.com/muhammadariyanto/billing-engine/internal/model/billing"

	mock "github.com/stretchr/testify/mock"
)

// IBillingRepository is an autogenerated mock type for the IBillingRepository type
type IBillingRepository struct {
	mock.Mock
}

// FetchAllByLoanID provides a mock function with given fields: ctx, loanID
func (_m *IBillingRepository) FetchAllByLoanID(ctx context.Context, loanID string) ([]*billingModel.Billing, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllByLoanID")
	}

	var r0 []*billingModel.Billing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*billingModel.Billing, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*billingModel.Billing); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingModel.Billing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUnpaidByLoanID provides a mock function with given fields: ctx, loanID
func (_m *IBillingRepository) FetchUnpaidByLoanID(ctx context.Context, loanID string) ([]*billingModel.Billing, error) {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for FetchUnpaidByLoanID")
	}

	var r0 []*billingModel.Billing
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*billingModel.Billing, error)); ok {
		return rf(ctx, loanID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*billingModel.Billing); ok {
		r0 = rf(ctx, loanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*billingModel.Billing)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, billing
func (_m *IBillingRepository) Insert(ctx context.Context, billing *billingModel.Billing) error {
	ret := _m.Called(ctx, billing)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingModel.Billing) error); ok {
		r0 = rf(ctx, billing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SumUnpaidByLoanID provides a mock function with given fields: ctx, loanID
func (_m *IBillingRepository) SumUnpaidByLoanID(ctx context.Context, loanID string) float64 {
	ret := _m.Called(ctx, loanID)

	if len(ret) == 0 {
		panic("no return value specified for SumUnpaidByLoanID")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, loanID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, billing
func (_m *IBillingRepository) Update(ctx context.Context, billing *billingModel.Billing) error {
	ret := _m.Called(ctx, billing)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingModel.Billing) error); ok {
		r0 = rf(ctx, billing)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBillingRepository creates a new instance of IBillingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBillingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBillingRepository {
	mock := &IBillingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
